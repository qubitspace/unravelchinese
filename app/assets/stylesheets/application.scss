body {
  margin: 0px;
  padding: 0px;
}

body {
  font-family: verdana, arial, helvetica, sans-serif;
}

.wrapper {
  // display: -webkit-box;
  // display: -moz-box;
  // display: -ms-flexbox;
  // display: -webkit-flex;
  //-webkit-flex-flow: row wrap;
  flex-flow: row wrap;
  display: flex;
  max-width: 1500px;
  margin: 0px auto;
  padding: 0px;
}

.header {
  flex-flow: row wrap;
  display: flex;
  max-width: 1500px;
  margin: 0px auto;
  background-color: #000000;
  color: #ffffff;

  .user-menu { text-align: right; }
  .logo {}
}


.main {
  flex-flow: row wrap;
  display: flex;
  max-width: 1500px;
  margin: 0px auto;

  .menu {}
  .content {}
  .meta {}

}

.footer { flex: initial; width: 100%; order: 3; height: 100px; border-top: 1px solid #000000; }


/* 0 to 500px */
@media all and (min-width: 0px) and (max-width: 500px) {

  .header {
    flex: initial;
    width: 100%;
    height: 100px;

    .user-menu { flex: initial; width: 100%; order: 1; }
    .logo { flex: initial; width: 100%; order: 2; }
  }

  .main {
    order: 2;
    width: 100%;
    .menu { flex: initial; width: 100%; order: 1; border-bottom: 1px solid #000000; }
    .content { flex: initial; width: 100%; order: 2; }
    .meta { flex: initial; width: 100%; order: 3; border-top: 1px solid #000000; }
  }

}

/* 501 to 1000px */
@media all and (min-width: 501px) and (max-width: 1000px) {

  .header {
    flex: initial;
    width: 100%;
    height: 50px;

    .logo { flex: initial; width: 50%; order: 1; }
    .user-menu { flex: initial; width: 50%; order: 2; }
  }

  .main {
    order: 2;
    width: 100%;
    .menu { flex: initial; width: 100%; order: 1; border-bottom: 1px solid #000000; }
    .content { flex: auto; width: 200px; order: 2; }
    .meta { flex: initial; width: 200px; order: 3; border-left: 1px solid #000000; }
  }

}


/* 1001px and more */
@media all and (min-width: 1001px) {

  .header {
    flex: initial;
    width: 100%;
    height: 50px;

    .logo { flex: initial; width: 50%; order: 1; }
    .user-menu { flex: initial; width: 50%; order: 2; }
  }

  .main {
    order: 2;
    width: 100%;
    .menu { flex: initial; width: 200px; order: 1; border-right: 1px solid #000000; }
    .content { flex: auto; width: 200px; order: 2; }
    .meta { flex: initial; width: 300px; order: 3; border-left: 1px solid #000000; }
  }

}


// flex-grow  flex-shrink   flex-basis

// initial          0 1 auto
  //  Sizes the item based on the width/height properties. (If the itemâ€™s main size property computes to auto,
  //  this will size the flex item based on its contents.) Makes the flex item inflexible when there is positive
  //  free space, but allows it to shrink to its minimum size when there is insufficient space. The alignment
  //  abilities or auto margins can be used to align flex items along the main axis.

// auto             1 1 auto
  //  Sizes the item based on the width/height properties, but makes them fully flexible, so that they absorb any
  //  free space along the main axis. If all items are either flex: auto, flex: initial, or flex: none, any positive
  //  free space after the items have been sized will be distributed evenly to the items with flex: auto.

// none             0 0 auto
  //  This value sizes the item according to the width/height properties, but makes the flex item fully inflexible.
  //  This is similar to initial, except that flex items are not allowed to shrink, even in overflow situations.

// positive-number  x 1 0%
  //  Makes the flex item flexible and sets the flex basis to zero, resulting in an item that receives the specified
  //  proportion of the free space in the flex container. If all items in the flex container use this pattern, their
  //  sizes will be proportional to the specified flex factor.

